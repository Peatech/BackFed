===============================================================================
FERA OUTLIER REMOVAL - IMPLEMENTATION COMPLETE
===============================================================================

PROBLEM IDENTIFIED (from your observation in slurm-8052592.out):
  Client 5: score=540116418560.0000 (5.4 × 10^11)
  Status: Classified as BENIGN → Escaped detection!
  
Attack: Anticipate creates extreme norms to evade consistency-based detection

===============================================================================
SOLUTION IMPLEMENTED - TWO-SIDED ADAPTIVE FILTERING
===============================================================================

CRITICAL FIX APPLIED:
  Original bug: Z-scores computed on NORMALIZED [0,1] scores
  → Raw norm 5.4×10^11 became 1.0 after normalization
  → Outlier signal destroyed!
  
  New approach: Z-scores computed on RAW norms BEFORE normalization
  → Preserves magnitude differences
  → Anticipate's 10^11 vs normal 10^1 = clear separation

TWO-STAGE DETECTION:
  Stage 1: Consistency-Based (Inverted Filtering)
    - Flag BOTTOM K% (low variance = backdoor)
    - M_initial, B_initial
  
  Stage 2: Norm-Inflation Evasion
    - Compute Modified Z-scores on RAW spectral/delta norms
    - Baseline = ALL clients (M_initial ∪ B_initial)
    - Flag if z_spectral > τ OR z_delta > τ
    - M_final = M_initial ∪ {outliers}

===============================================================================
CONFIGURATION (Already Added to config/base.yaml)
===============================================================================

fera:
  # ... existing parameters ...
  
  # NEW: Outlier removal
  remove_outliers: true       # Enable/disable (default: ON)
  outlier_threshold: 3.0      # Z-score threshold (3.0 = 3 std devs)

===============================================================================
HOW TO USE
===============================================================================

1. DEFAULT (recommended):
   - Already enabled in config
   - Threshold = 3.0σ
   - No changes needed!

2. DISABLE (if it causes issues):
   aggregator_config.fera.remove_outliers=false

3. TUNE THRESHOLD:
   # More aggressive (catch more outliers)
   aggregator_config.fera.outlier_threshold=2.5
   
   # More conservative (only extreme cases)
   aggregator_config.fera.outlier_threshold=4.0

===============================================================================
EXPECTED BEHAVIOR
===============================================================================

When Anticipate is detected:

Before (Round 1009 in your log):
  ✗ Client 5: score=5.4e11 → Classified as BENIGN (missed!)
  ✗ Recall: 0.0
  ✗ Backdoor Accuracy: 99.47%

After (with outlier removal):
  ✓ Client 5: score=5.4e11 → Flagged as OUTLIER → MALICIOUS
  ✓ Recall: Expected 0.8-1.0
  ✓ Backdoor Accuracy: Expected <20%

Logs will show:
  INFO  Outlier detection: Flagging 1 extreme outliers from benign cluster
  INFO  Outliers (scaled norm attacks): [5]

===============================================================================
TEST RECOMMENDATION
===============================================================================

Run Anticipate attack again to validate:

sbatch slurm_optimized.sbatch

Watch for:
  - "Outlier detection: Flagging X extreme outliers"
  - Anticipate clients appearing in malicious list
  - Improved recall and reduced BA

===============================================================================
TUNING GUIDE
===============================================================================

Threshold = 3.0 (Default):
  - Balanced precision/recall
  - Catches most scaled norm attacks
  - Recommended for initial testing

Threshold = 2.0-2.5 (Aggressive):
  - Higher recall, more false positives
  - Use if Anticipate still escapes

Threshold = 4.0-5.0 (Conservative):
  - Lower recall, very high precision
  - Use if too many false positives

Turn OFF (remove_outliers=false):
  - If causing issues with benign clients
  - If all attacks are low-norm

===============================================================================
TECHNICAL DETAILS
===============================================================================

Two-Sided Modified Z-Score on RAW Norms:

For spectral norms:
  Baseline = ALL clients (M_initial ∪ B_initial)
  median_σ = median({σ_i : i ∈ ALL})
  MAD_σ = median({|σ_i - median_σ| : i ∈ ALL})
  
  For each j in B_initial:
    z_σ(j) = |σ_j - median_σ| / (1.4826 × MAD_σ)

For delta norms:
  median_δ = median({δ_i : i ∈ ALL})
  MAD_δ = median({|δ_i - median_δ| : i ∈ ALL})
  
  For each j in B_initial:
    z_δ(j) = |δ_j - median_δ| / (1.4826 × MAD_δ)

Flag if: z_σ(j) > τ OR z_δ(j) > τ (default τ = 3.0)

Cost: ~0.1s per round (negligible)

===============================================================================
FILES MODIFIED
===============================================================================

✓ backfed/servers/fera_server.py
  - Added remove_outliers parameter
  - Added outlier_threshold parameter
  - Implemented _detect_outliers() method
  - Updated _apply_threshold() to call outlier detection
  - Updated initialization logging

✓ config/base.yaml
  - Added remove_outliers: true
  - Added outlier_threshold: 3.0
  - Added documentation comments

✓ Documentation created:
  - FERA_OUTLIER_REMOVAL.md (comprehensive guide)
  - OUTLIER_REMOVAL_SUMMARY.txt (this file)

===============================================================================
STATUS: ✅ READY TO TEST
===============================================================================

The feature is:
  ✓ Implemented
  ✓ Configured (enabled by default)
  ✓ Documented
  ✓ Ready for experiments

No code changes needed on your part!

===============================================================================
NEXT STEPS
===============================================================================

1. Run slurm_optimized.sbatch (includes Anticipate attack)
2. Check logs for "Outlier detection" messages
3. Compare results with/without outlier removal if needed
4. Tune threshold based on your specific requirements

===============================================================================

